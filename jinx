#!/usr/bin/env bash

# Define colors and formats for making everything pretty.
COLOR_RED="\033[0;31m"
COLOR_RED_LIGHT="\033[1;31m"

COLOR_GREEN="\033[0;32m"
COLOR_GREEN_LIGHT="\033[1;32m"

COLOR_ORANGE="\033[0;33m"
COLOR_YELLOW="\033[1;33m"

COLOR_BLUE="\033[0;34m"
COLOR_BLUE_LIGHT="\033[1;34m"

COLOR_PURPLE="\033[0;35m"
COLOR_PURPLE_LIGHT="\033[1;35m"

COLOR_CYAN="\033[0;36m"
COLOR_CYAN_LIGHT="\033[1;36m"

COLOR_GRAY="\033[1;30m"
COLOR_GRAY_LIGHT="\033[0;37m"

COLOR_BLACK="\033[0;30m"
COLOR_WHITE="\033[1;37m"

FORMAT_BOLD="\033[1m"
FORMAT_UNDERLINE="\033[4m"

FORMAT_END="\033[0m"

# Define location of configuration
JINX_CONFIG_FILE="$HOME/.jinxrc"

# Functions
function jinx_help {
    echo -e "${FORMAT_BOLD}${FORMAT_UNDERLINE}Available commands:${FORMAT_END}"
    echo -e ""
    echo -e "${COLOR_CYAN}start${FORMAT_END}                                    start nginx service"
    echo -e "${COLOR_CYAN}restart${FORMAT_END}                                  restart nginx service"
    echo -e "${COLOR_CYAN}stop${FORMAT_END}                                     stop nginx service"
    echo -e ""
    echo -e "${COLOR_CYAN}site activate <name> [--restart|-r]${FORMAT_END}      activate a site"
    echo -e "${COLOR_CYAN}site deactivate <name> [--restart|-r]${FORMAT_END}    deactivate a site"
    echo -e "${COLOR_CYAN}site delete <name> [--yes|-y]${FORMAT_END}            delete a site"
    echo -e "${COLOR_CYAN}site create <name> [<template>]${FORMAT_END}          create a site from template"
    echo -e "${COLOR_CYAN}site edit <name>${FORMAT_END}                         edit a site .conf file with editor"
    echo -e ""
    echo -e "${COLOR_CYAN}config <key>${FORMAT_END}                             get config value from ~/.jinxrc"
    echo -e "${COLOR_CYAN}config <key> <value>${FORMAT_END}                     set config value in ~/.jinxrc"
    echo ""
}

function jinx_service {
    OS="$(uname -a)"
    case "$OS" in
        *Ubuntu*)
            sudo systemctl $1 nginx > /dev/null
        ;;
        Darwin*)
            sudo brew services $1 nginx > /dev/null
        ;;
        *)
            echo -e "${COLOR_RED}Failure.${FORMAT_END} Automatic $1 not supported on your system. Please $1 nginx manually."
            exit 1
        ;;
    esac

    if [ $? -eq 0 ]
    then
        case "$1" in
            start) echo -e "${COLOR_GREEN}Success.${FORMAT_END} Started nginx service on your system.";;
            stop) echo -e "${COLOR_GREEN}Success.${FORMAT_END} Stopped nginx service on your system.";;
            restart) echo -e "${COLOR_GREEN}Success.${FORMAT_END} Restarted nginx service on your system.";;
        esac
    fi
}

function jinx_optional_restart {
    case "$1" in
        --restart|-r) jinx_service "restart";;
    esac
}

function jinx_config_set {
    local JINX_CONFIG_VALUE="$2"

    if [[ -z "$1" ]] || [[ -z "$2" ]]
    then
         echo -e "${COLOR_RED}Failure.${FORMAT_END} Please specify a configuration key and value."
         exit 1
    fi

    if [[ "$1" == "nginx_path" ]]
    then
        local END_OF_PATH=$(echo "${2: -1}");

        if [[ "$END_OF_PATH" != "/" ]]
        then
            local JINX_CONFIG_VALUE="$2/"
        fi
    fi

    if [[ "$1" == "config_path" ]]
    then
        local JINX_CONFIG_VALUE=$(echo $2 | sed -e "s#/##g")
    fi

    grep -q "$1=.*" $JINX_CONFIG_FILE \
        && sed -i -e "s#$1=.*#$1=$JINX_CONFIG_VALUE#" $JINX_CONFIG_FILE \
        || echo "$1=$JINX_CONFIG_VALUE" >> $JINX_CONFIG_FILE

    echo -e "${COLOR_GREEN}Success.${FORMAT_END} Updated setting '$1' to '$JINX_CONFIG_VALUE'."
    exit 0
}

function jinx_config_get {
    if [[ -z "$1" ]]
    then
         echo -e "${COLOR_RED}Failure.${FORMAT_END} Please specify a configuration key."
         exit 1
    fi

    echo $(grep -oh "$1=.*" $JINX_CONFIG_FILE | sed "s/$1=//")
    exit 0
}

function jinx_site_activate {
    if [[ -z "$1" ]]
    then
         echo -e "${COLOR_RED}Failure.${FORMAT_END} Please specify a site name."
         exit 1
    fi

    local NGINX_PATH=$(jinx_config_get "nginx_path")
    local FILE_PATH="$NGINX_PATH/sites-available/$1.conf"

    if [[ ! -f "$FILE_PATH" ]]
    then
         echo -e "${COLOR_RED}Failure.${FORMAT_END} Site '$1' does not exist."
         exit 1
    fi

    ln -sfn $FILE_PATH $NGINX_PATH/sites-enabled/ > /dev/null
    echo -e "${COLOR_GREEN}Success.${FORMAT_END} Activated site '$1'."

    jinx_optional_restart "$2"

    exit 0
}

function jinx_site_deactivate {
    if [[ -z "$1" ]]
    then
         echo -e "${COLOR_RED}Failure.${FORMAT_END} Please specify a site name."
         exit 1
    fi

    local NGINX_PATH=$(jinx_config_get "nginx_path")
    local FILE_PATH="$NGINX_PATH/sites-enabled/$1.conf"

    if [[ ! -f "$FILE_PATH" ]]
    then
         echo -e "${COLOR_ORANGE}Failure.${FORMAT_END} Site '$1' is not activated."
         exit 1
    fi

    rm $FILE_PATH
    echo -e "${COLOR_GREEN}Success.${FORMAT_END} Deactivated site '$1'."

    jinx_optional_restart "$2"

    exit 0
}

function jinx_site_edit {
    if [[ -z "$1" ]]
    then
         echo -e "${COLOR_RED}Failure.${FORMAT_END} Please specify a site name."
         exit 1
    fi

    local EDITOR=$(jinx_config_get "editor")
    local NGINX_PATH=$(jinx_config_get "nginx_path")
    local FILE_PATH="$NGINX_PATH/sites-available/$1.conf"

    if [[ ! -f "$FILE_PATH" ]]
    then
         echo -e "${COLOR_RED}Failure.${FORMAT_END} Site '$1' does not exist."
         exit 1
    fi

    if [[ -z "$EDITOR" ]]
    then
         local EDITOR=nano
         echo -e "${COLOR_YELLOW}No preferred editor.${FORMAT_END} Falling back to nano. Please set the EDITOR configuration key"
    fi

    $EDITOR $FILE_PATH
    exit 0
}

function jinx_site_create {
    local CONFIG_TEMPLATE="default"

    if [[ -z "$1" ]]
    then
         echo -e "${COLOR_RED}Failure.${FORMAT_END} Please specify a site name."
         exit 1
    fi

    if [[ ! -z "$2" ]]
    then
         local CONFIG_TEMPLATE="$2"
    fi

    local NGINX_PATH=$(jinx_config_get "nginx_path")
    local CONFIG_PATH=$(jinx_config_get "config_path")
    local TEMPLATE_PATH="$NGINX_PATH$CONFIG_PATH/"
    local TEMPLATE_FILE="$TEMPLATE_PATH$CONFIG_TEMPLATE.conf"
    local NEW_FILE_PATH="$NGINX_PATH/sites-available/$1.conf"

    if [[ ! -f "$TEMPLATE_FILE" ]]
    then
         echo -e "${COLOR_RED}Failure.${FORMAT_END} Configuration template '$CONFIG_TEMPLATE' does not exist."
         exit 1
    fi

    if [[ -f "$NEW_FILE_PATH" ]]
    then
         echo -e "${COLOR_RED}Failure.${FORMAT_END} Site '$1' already exists. Please choose another name."
         exit 1
    fi

    cp "$TEMPLATE_FILE" "$NEW_FILE_PATH"
    sed -i -e "s/___/$1/g" "$NEW_FILE_PATH"

    echo -e "${COLOR_GREEN}Success.${FORMAT_END} Site '$1' was created and can now be activated."
    exit 0
}

function jinx_site_delete {
    local NGINX_PATH=$(jinx_config_get "nginx_path")
    local FILE_PATH_AVAILABLE="$NGINX_PATH/sites-available/$1.conf"
    local FILE_PATH_ENABLED="$NGINX_PATH/sites-enabled/$1.conf"

    if [[ -f $FILE_PATH_ENABLED ]]
    then
        echo -e "${COLOR_RED}${FORMAT_UNDERLINE}${FORMAT_BOLD}ABORTING. Site '$1' is currently activated!${FORMAT_END}"
        echo -e "If you really want to delete it, please deactivate the site first."
        exit 2
    fi

    if [[ ! -f $FILE_PATH_AVAILABLE ]]
    then
        echo -e "${COLOR_RED}Failure.${FORMAT_END} Site '$1' does not exist."
        exit 1
    fi

    if [[ ! "$2" == "-y" ]] && [[ ! "$2" == "--yes" ]]
    then
        echo -e "${COLOR_ORANGE}Careful:${FORMAT_END} Are you sure you want to delete site '$1'? (y/N): \c"
        read DELETE_CONSENT

        local COMP_DELETE_CONSENT=$(echo $DELETE_CONSENT | tr '[A-Z]' '[a-z]')
    else
        local COMP_DELETE_CONSENT="y"
    fi

    if [[ "$COMP_DELETE_CONSENT" == "y" || "$COMP_DELETE_CONSENT" == "yes" ]]
    then
        echo "Deleting"
        exit 0

        rm $FILE_PATH_ENABLED
        echo -e "${COLOR_GREEN}Success.${FORMAT_END} Site '$1' was deleted."
    fi

    echo -e "${COLOR_RED}Aborting.${FORMAT_END} Did not receive 'y' or 'yes' as answer, so not deleting site."
    exit 1
}

#
# Sanity checks
#

# Create configuration file if it doesn't exist.
if [[ ! -f $JINX_CONFIG_FILE ]]
then
    echo -e "#\n# .jinxrc\n# Configuration file for jinx\n#\n# Each configuration key must stand on its own line with no comments.\n# The comments above each variable explain their purpose.\n#\n\n# Where you nginx.conf and other files are located. Must end in "/".\nnginx_path=/etc/nginx/\n\n# Where to find the configuration templates for new sites.\n# Gets appended to the nginx path. Must not contain slashes\nconfig_path=configurations\n\n# Which editor to use for editing sites\neditor=nano\n" >> $JINX_CONFIG_FILE
    echo -e "${COLOR_YELLOW}First run!${FORMAT_END} Creating default configuration in ~/.jinxrc"
    echo "Pardon the interruption, we will now continue running your command."
    echo ""
fi

# We require at least one command
if [[ -z "$1" ]]
then
    echo -e "${COLOR_RED}Please provide a command.${FORMAT_END}\n"
    jinx_help
    exit 1
fi

# Display help text
if [[ "$1" == "help" ]]
then
    echo ""
    jinx_help
    exit 0
fi

# Process arguments in order
for arg in "$@"
do
    case $arg in
        config)
            if [[ -z "$2" ]]
            then
                echo -e "${COLOR_RED}Failure.${FORMAT_END} Please provide a key to fetch or a key and value to set."
                exit 1
            fi

            if [[ -z "$3" ]]
            then
                jinx_config_get "$2"
            elif [[ ! -z "$3" ]]
            then
                jinx_config_set "$2" "$3"
            fi
        ;;
        restart)
            jinx_service "restart"
        ;;
        stop)
            jinx_service "stop"
        ;;
        start)
            jinx_service "start"
        ;;
        site)
            if [[ "$2" == "activate" ]]
            then
                jinx_site_activate $3 $4
            elif [[ "$2" == "deactivate" ]]
            then
                jinx_site_deactivate $3 $4
            elif [[ "$2" == "edit" ]]
            then
                jinx_site_edit $3
            elif [[ "$2" == "create" ]]
            then
                jinx_site_create $3 $4
            elif [[ "$2" == "delete" ]]
            then
                jinx_site_delete $3 $4
            else
                echo -e "${COLOR_RED}Please provide a subcommand.${FORMAT_END}\n"
                jinx_help
                exit 1
            fi
        ;;
        *)
            echo -e "${COLOR_RED}Command was not recognized.${FORMAT_END}\n"

            exit 1
        ;;
    esac
done
